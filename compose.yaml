name: gi

networks:
  backend:

services:

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - LOG_JSON_FORMAT=True
      - POSTGRES_HOST=postgres
      - ZIPKIN_HOST=distributor
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # todo: docker secret

#  postgres-exporter:
#    image: prometheuscommunity/postgres-exporter:latest
#    # todo: promtail label
#    networks:
#      - backend
#    environment:
#      - DATA_SOURCE_URI=postgres?sslmode=disable
#      - DATA_SOURCE_USER=postgres
#      - DATA_SOURCE_PASS=postgres  # todo: docker secret

  grafana:
    image: grafana/grafana:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=foobar  # todo: docker secret
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=tempoSearch tempoBackendSearch tempoServiceGraph
    volumes:
      - ./config/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./.data/grafana:/var/lib/grafana

  alertmanager:
    image: prom/alertmanager:v0.23.0
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yaml:/config/alertmanager.yaml
      - ./.data/alertmanager:/data
    command: "--config.file=/config/alertmanager.yaml --log.level=debug"
    restart: unless-stopped


  prometheus:
    image: prom/prometheus:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - ./.data/prometheus:/prometheus
    command:
      - "--log.level=debug"
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--web.enable-remote-write-receiver"
      - "--enable-feature=exemplar-storage"
      - "--query.lookback-delta=30s"

  minio:
    image: minio/minio:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=testtesttest
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    volumes:
      - ./.data/minio:/data
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        mkdir -p /data/tempo
        minio server /data --console-address ':9001'

  promtail:
    image: grafana/promtail:2.6.1
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "9080:9080"
    volumes:
      - ./config/promtail.yaml:/etc/promtail/promtail.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yaml
    depends_on:
      - loki-gateway

  loki-init:
    image: grafana/loki:latest
    networks:
      - backend
    user: root
    volumes:
      - ./.data/loki:/loki
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/loki"

  loki-gateway:
    image: nginx:1.19
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "8080:80"
      - "3100"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf

  loki-frontend:
    image: grafana/loki:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3100"
    volumes:
      - ./config/loki.yaml:/etc/loki/loki.yaml
    command: "-config.file=/etc/loki/loki.yaml -target=query-frontend -frontend.downstream-url=http://loki-read:3100"
    restart: always
    deploy:
      mode: replicated
      replicas: 2

  loki-read:
    image: grafana/loki:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3100"
      - "7946"
    volumes:
      - ./config/loki.yaml:/etc/loki/loki.yaml
    command: "-config.file=/etc/loki/loki.yaml -target=read"
    restart: always
    deploy:
      mode: replicated
      replicas: 3

  loki-write:
    image: grafana/loki:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3100"
      - "7946"
    volumes:
      - ./config/loki.yaml:/etc/loki/loki.yaml
    command: "-config.file=/etc/loki/loki.yaml -target=write"
    restart: always
    deploy:
      mode: replicated
      replicas: 3

  tempo-distributor:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200"
      - "9411"  # zipkin
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=distributor -config.file=/etc/tempo.yaml"
    restart: always

  tempo-ingester-0:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200"
      - "9411"  # zipkin
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=ingester -config.file=/etc/tempo.yaml"
    restart: always

  tempo-ingester-1:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200"
      - "9411"  # zipkin
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=ingester -config.file=/etc/tempo.yaml"
    restart: always

  tempo-ingester-2:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200"
      - "9411"  # zipkin
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=ingester -config.file=/etc/tempo.yaml"
    restart: always

  tempo-query-frontend:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200:3200"
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=query-frontend -config.file=/etc/tempo.yaml -log.level=debug"
    restart: always

  tempo-querier:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200"
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=querier -config.file=/etc/tempo.yaml -log.level=debug"
    restart: always

  tempo-compactor:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200"
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=compactor -config.file=/etc/tempo.yaml"
    restart: always

  tempo-metrics-generator:
    image: grafana/tempo:latest
    labels:
      - "promtail=true"
    networks:
      - backend
    ports:
      - "3200"
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    command: "-target=metrics-generator -config.file=/etc/tempo.yaml"
    restart: always
